3. Описание структур данныхукпфукфуккп
Для реализации волнового алгоритма поиска пути был составлен абстрактный тип данных (АТД) Лабиринт.
3.1 Структура лабиринта:
Лабиринт — это структура данных, представляющая собой двумерную сетку из клеток различных типов (например, стены и проходы).
1.	Общие параметры:
–	Ширина и высота лабиринта.
–	Количество строк и столбцов.
–	Массив символов, представляющий карту лабиринта.
–	Координаты начальной и конечной точек.
2.	Структура хранения данных:
–	Двумерный массив T для хранения карты лабиринта, где каждый элемент массива соответствует одной клетке лабиринта:
–	WALL — непроходимая клетка (стена)
–	EMPTY — проходимая клетка (проход)
–	START — начальная точка
–	END — конечная точка
–	PATH — клетка пути
3.2 Операции
Операции обеспечивают базовую функциональность лабиринта: инициализируется лабиринт, изменяется тип клетки, выводится лабиринт, проверяются координаты на допустимость, выполняется волновой алгоритм и строится кратчайший путь.
Конструктор
Назначение: создание лабиринта заданных размеров.
Вход:
–	w: ширина лабиринта,
–	h: высота лабиринта,
Начальные значения:
–	Изначально лабиринт заполнен проходимыми клетками.
Процесс:
–	Создание нового объекта лабиринта.
Постусловие:
–	Лабиринт успешно инициализирован, его размеры соответсутвуют входным данным, все клетки проходимые.
isValid(x, y)
Назначение: Проверка, являются ли координаты (x, y) допустимыми в пределах лабиринта.
Вход:
–	x: горизонтальная координата,
–	y: вертикальная координата.
Предусловия:
–	Лабиринт уже инициализирован.
Процесс:
–	Проверяется, что координаты лежат в пределах размеров лабиринта.
Выход:
–	Логическое значение true, если координаты допустимы, иначе false.
Постусловие:
–	Состояние лабиринта остается неизменным.
waveAlgorithm()
Назначение: Выполнение волнового алгоритма для поиска минимального расстояния до всех проходимых клеток от стартовой точки.
Вход:
–	Нет входных данных.
Предусловия:
–	Стартовая точка должна быть допустимой и проходимой.
Процесс:
–	Производится инициализация матрицы расстояний для всех клеток лабиринта.
–	Производится выполнение волнового алгоритма из начальной точки.
Выход:
–	Нет выходных данных

Постусловие:
–	Все проходимые клетки лабиринта помечены минимальным количеством шагов до них.
printMaze()
Назначение: Вывод текущего состояния лабиринта на экран.
Вход:
–	Нет входных данных.
Предусловия:
–	Лабиринт уже инициализирован.
Процесс:
–	Выполнение прохода по каждому элементу двумерного массива, представляющего карту лабиринта.
–	Вывод символов, соответствующих клеткам лабиринта, на экран.
Выход:
–	Отображенный на экране лабиринт.
Постусловие:
–	Состояние лабиринта остается неизменным.
editCell(x, y, type)
Назначение: Преобразование указанной клетки.
Вход:
–	x: горизонтальная координата клетки.
–	y: вертикальная координата клетки.
–	type: тип клетки
Предусловия:
–	Координаты (x,y) должны быть допустимыми.
Процесс:	
–	Выполняется изменение значения клетки на EMPTY или WALL.
Выход:
–	Нет выходного значения.
Постусловие:
–	Клетка изменила тип на указанный.

findPath()
Назначение: Восстановление и вывод минимального пути от конечной точки к начальной.
Вход:
–	Нет входных данных.
Предусловия:
–	Выполнен волновой алгоритм.
Процесс:
–	Выполняется создание минимального обратного пути от конечной точки к начальной.
Выход:
–	Последовательность координат минимального пути и графическая карта лабиринта с отмеченным минимальным путем.
Постусловие:
–	Состояние лабиринта остается неизменным.
